{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","search","window","location","hash","substr","loading","result","_initializeLoad","bind","assertThisInitialized","handleOnChange","handleOnSubmit","_parseWeatherData","_renderSpinnerOrChart","event","newState","objectSpread","target","value","setState","preventDefault","react_default","a","createElement","className","Container","Row","Col","href","Form","onSubmit","Group","controlId","Control","type","placeholder","autoFocus","onChange","_this2","url","axios","get","then","res","data","catch","err","console","error","alert","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","item","key","tmp","date","rain","temperature","windSpeed","windDirection","symbol","description","weather","icon","precip","toFixed","temp","wind_spd","wind_dir","return","values","length","ListGroup","map","style","transform","d","Date","dateString","getDate","getMonth","getFullYear","timeString","toTimeString","Math","round","parseFloat","Item","src","alt","title","width","height","Spinner","animation","React","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c2cbd94c.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport {Container, Row, Col, Form, Spinner, ListGroup} from 'react-bootstrap';\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tsearch: window.location.hash.substr(1),\n\t\t\tloading: false,\n\t\t\tresult: [],\n\t\t};\n\n\t\tthis._initializeLoad = this._initializeLoad.bind(this);\n\t\tthis.handleOnChange = this.handleOnChange.bind(this);\n\t\tthis.handleOnSubmit = this.handleOnSubmit.bind(this);\n\t\tthis._parseWeatherData = this._parseWeatherData.bind(this);\n\t\tthis._renderSpinnerOrChart = this._renderSpinnerOrChart.bind(this);\n\n\t\tif(this.state.search !== '') {\n\t\t\tthis._initializeLoad(this.state.search);\n\t\t}\n\t}\n\n\thandleOnChange(event) {\n\t\tconst newState = {...this.state};\n\t\tnewState.search = event.target.value;\n\t\tthis.setState(newState);\n\t}\n\n\thandleOnSubmit(event) {\n\t\tevent.preventDefault();\n\n\t\tconst newState = {...this.state};\n\t\tnewState.loading = true;\n\t\tnewState.result = [];\n\t\tthis.setState(newState);\n\n\t\tconst location = newState.search;\n\t\t\n\t\twindow.location.hash = location;\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"app\">\n\t\t\t\t<Container>\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Col className=\"text-left\">\n\t\t\t\t\t\t\t<div className=\"attribution\">Data provided by: <a href=\"https://www.weatherbit.io/\">Weatherbit</a></div>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Row>\n\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t<Form onSubmit={this.handleOnSubmit}>\n\t\t\t\t\t\t\t\t<Form.Group controlId=\"formLocation\">\n\t\t\t\t\t\t\t\t\t<Form.Control type=\"text\" placeholder=\"Location\" autoFocus onChange={this.handleOnChange} value={this.state.search} />\n\t\t\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t\t\t</Form>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Row>\n\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t{this._renderSpinnerOrChart()}\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Row>\n\t\t\t\t</Container>\n\t\t\t</div>\n\t\t);\n\t}\n\n\t_initializeLoad(location) {\n\t\tconst url = 'https://api.weatherbit.io/v1.0/forecast/hourly/geosearch?city='+location+'&key=3025f627f2d5456f92e0b52cf752d758';\n\t\taxios.get(url).then((res) => {\n\t\t\tconst newState = {...this.state};\n\t\t\tnewState.result = this._parseWeatherData(res.data);\n\t\t\tnewState.loading = false;\n\t\t\tthis.setState(newState);\n\t\t}).catch((err) => {\n\t\t\tconsole.error(err);\n\n\t\t\tconst newState = {...this.state};\n\t\t\tnewState.loading = false;\n\t\t\tthis.setState(newState);\n\n\t\t\talert('Could not load weather data for location, please change your term or see the error log');\n\t\t});\n\t}\n\n\t_parseWeatherData(data) {\n\t\tconst result = {};\n\n\t\tfor(const item of data.data) {\n\t\t\tconst key = item['ts'];\n\t\t\tlet tmp = null;\n\n\t\t\tif(result[key]) {\n\t\t\t\ttmp = result[key];\n\t\t\t} else {\n\t\t\t\ttmp = {\n\t\t\t\t\t'key': key,\n\t\t\t\t\t'date': item['timestamp_local'],\n\t\t\t\t\t'rain': 0,\n\t\t\t\t\t'temperature': 0,\n\t\t\t\t\t'windSpeed': 0,\n\t\t\t\t\t'windDirection': 0,\n\t\t\t\t\t'symbol': '',\n\t\t\t\t\t'description': '',\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttmp['symbol'] = item.weather.icon;\n\t\t\ttmp['description'] = item.weather.description;\n\t\t\ttmp['rain'] = item.precip.toFixed(3);\n\t\t\ttmp['temperature'] = item.temp;\n\t\t\ttmp['windSpeed'] = item.wind_spd.toFixed(2);\n\t\t\ttmp['windDirection'] = item.wind_dir;\n\n\t\t\tresult[key] = tmp;\n\t\t};\n\n\t\treturn Object.values(result);\n\t}\n\n\t_renderSpinnerOrChart() {\n\t\tif(!this.state.loading && this.state.result.length) {\n\t\t\treturn (\n\t\t\t\t<div className=\"weather-output\">\n\t\t\t\t\t<ListGroup className=\"list-group-horizontal\">\n\t\t\t\t\t\t{this.state.result.map((item) => {\n\t\t\t\t\t\t\tconst icon = 'https://www.weatherbit.io/static/img/icons/'+item.symbol+'.png';\n\t\t\t\t\t\t\tconst style = {\n\t\t\t\t\t\t\t\ttransform: \"rotate(\"+item.windDirection+\"deg)\"\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tconst d = new Date(item.date);\n\t\t\t\t\t\t\tconst dateString = d.getDate()+'-'+(d.getMonth()+1)+'-'+d.getFullYear();\n\t\t\t\t\t\t\tconst timeString = d.toTimeString().substr(0,5);\n\t\t\t\t\t\t\tconst temperature = Math.round(item.temperature);\n\t\t\t\t\t\t\tlet rain;\n\n\t\t\t\t\t\t\tif(item.rain > 0 && item.rain < 1) {\n\t\t\t\t\t\t\t\train = \"< 1\";\n\t\t\t\t\t\t\t} else if(item.rain < 1) {\n\t\t\t\t\t\t\t\train = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\train = parseFloat(item.rain).toFixed(2);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<ListGroup.Item key={item.key}>\n\t\t\t\t\t\t\t\t\t<div className=\"date-item\">\n\t\t\t\t\t\t\t\t\t\t<div>{dateString}</div>\n\t\t\t\t\t\t\t\t\t\t<div>{timeString}</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div><img src={icon} alt={item.description} title={item.description} width=\"64\" height=\"64\" /></div>\n\t\t\t\t\t\t\t\t\t<div>{temperature}&deg;</div>\n\t\t\t\t\t\t\t\t\t<div>{rain} mm</div>\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t{item.windSpeed} m/s\n\t\t\t\t\t\t\t\t\t\t<span className=\"wind-direction\" style={style}>&#x2193;</span>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</ListGroup>\n\t\t\t\t</div>\n\t\t\t)\n\t\t} else if(this.state.loading) {\n\t\t\treturn <Spinner animation=\"grow\" />\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}